// Попробуй переписать классовый компонент Counter, используя хуки:

// class Counter extends Component {
//   state = {
//     count: 0
//   };
//   handleClick = () => {
//     this.setState(({ count }) => ({
//       count: count + 1
//     }));
//   };
//   render() {
//     return <button onClick={this.handleClick}>{this.state.count}</button>;
//   }
// }


// Импортируем нужные хуки 
import { useState, useEffect } from "react";


// Создаем функциональный компенент

// В функции компонента Component мы возвращаем JSX-элемент, который отображает количество нажатий на кнопку и кнопку для увеличения счетчика.

// Когда пользователь нажимает на кнопку, мы вызываем функцию setCount с аргументом count + 1, что обновляет состояние count

export default function Component() {

    // используем хук для определения состояния count, первоначально это состояние равно 0. Хук useState имеет 2 переменных, одна из которых - название состояния (count в данном случае), а вторая - функция, которая меняет это состояние (setCount в данном случае)
    const [count, setCount] = useState(0);


    // используем хук для создания эффекта, который будет выполняться после рендеринга компонента.

    // useEffect принимает два аргумента: функцию, которая будет выполняться, и массив зависимостей. В этом примере мы не передаем второй аргумент, поэтому эффект будет выполняться после каждого рендеринга компонента.

    // В функции эффекта мы обновляем заголовок документа, используя API браузера (document.title). Мы используем значение count для формирования текста заголовка.
    useEffect(() => {
        document.title = `Вы нажали ${count} раз`;
    });

    return (
        <div>
            <p>Вы нажали {count} раз</p>
            {/* по кнопке сработает функция setCount и увеличит значение count на 1 единицу */}
            <button onClick={() => setCount(count + 1)}>Нажми на меня</button>
        </div>
    );
}

// Когда компонент Component рендерится впервые, состояние count равно 0. (это всё выводится на экран)Затем мы рендерим кнопку и текст с количеством нажатий.

// Когда пользователь нажимает на кнопку, мы обновляем состояние count с помощью setCount. Это вызывает повторный рендеринг компонента.

// После рендеринга компонента эффект useEffect выполняется и обновляет заголовок документа с помощью API браузера.

// Таким образом, каждый раз, когда пользователь нажимает на кнопку, мы обновляем состояние count, рендерим компонент и обновляем заголовок документа.